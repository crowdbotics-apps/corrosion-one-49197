"""
Django settings for corrosion_one_49197 project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import io
from datetime import timedelta

import environ
import logging
import json
import base64
import binascii
import google.auth
import sentry_sdk
from google.oauth2 import service_account
from google.cloud import secretmanager
from google.auth.exceptions import DefaultCredentialsError
from google.api_core.exceptions import PermissionDenied
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient
from sentry_sdk.integrations.django import DjangoIntegration
from csp.constants import NONE, SELF

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env_file = os.path.join(BASE_DIR, ".env")
env = environ.Env()
env.read_env(env_file)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

try:
    # Pull secrets from Google Cloud Secret Manager
    _, project = google.auth.default()
    client = secretmanager.SecretManagerServiceClient()
    settings_name = os.environ.get("SETTINGS_NAME", "django_settings")
    name = client.secret_version_path(project, settings_name, "latest")
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
    env.read_env(io.StringIO(payload))
except (DefaultCredentialsError, PermissionDenied):
    pass

try:
    # Pull secrets from Aure KeyVault
    credentials = DefaultAzureCredential()
    vault_url = env.str("AZURE_KEYVAULT_RESOURCEENDPOINT", "")
    vault_secret_name = env.str("AZURE_KEY_VAULT_SECRET_NAME", "secrets")
    client = SecretClient(vault_url=vault_url, credential=credentials)
    secret = client.get_secret(vault_secret_name)
    env.read_env(io.StringIO(secret.value))
except Exception as e:
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

ALLOWED_HOSTS = env.list("HOST", default=["*"])
SITE_ID = 1

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = env.bool("SECURE_REDIRECT", default=False)


# Application definition
INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

LOCAL_APPS = [
    'users',
    'utils',
    'owner',
    'inspector',
    'home',
    'jobs',
    'notifications',
    'chat',
    'payments',
    'configuration',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'phonenumber_field',
    'dj_rest_auth',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_json_widget',
    'django_extensions',
    'drf_spectacular',
    'storages',
    'import_export',
    'webshell',
    'cities_light',
    'stripe',
    'csp'
]

INSTALLED_APPS += LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'corrosion_one_49197.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'web_build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'corrosion_one_49197.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

if env.str("DATABASE_URL", default=None):
    DATABASES = {
        'default': env.db()
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

if DEBUG:
    AUTH_PASSWORD_VALIDATORS = []
else:
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/



STATIC_URL = '/static/'

MIDDLEWARE += ['whitenoise.middleware.WhiteNoiseMiddleware']

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), os.path.join(BASE_DIR, 'web_build/static')]

# Configuration for Azure Storage
AS_BUCKET_NAME = env.str("AS_BUCKET_NAME", "")
AS_STATIC_CONTAINER = env.str("AS_STATIC_CONTAINER", "static")
AS_MEDIA_CONTAINER = env.str("AS_MEDIA_CONTAINER", "media")

if AS_BUCKET_NAME:
    AZURE_ACCOUNT_NAME = AS_BUCKET_NAME
    AZURE_TOKEN_CREDENTIAL = DefaultAzureCredential()

    AZURE_URL_EXPIRATION_SECS  = env.int("AZURE_URL_EXPIRATION_SECS", 3600)
    DEFAULT_FILE_STORAGE = "corrosion_one_49197.storage_backends.AzureMediaStorage"
    STATICFILES_STORAGE = "corrosion_one_49197.storage_backends.AzureStaticStorage"
    # AZURE_URL_EXPIRATION_SECS = None
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.azure_storage.AzureStorage",
            "OPTIONS": {
                "token_credential": DefaultAzureCredential(),
                "account_name": AS_BUCKET_NAME,
                "azure_container": AS_MEDIA_CONTAINER,
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.azure_storage.AzureStorage",
            "OPTIONS": {
                "token_credential": DefaultAzureCredential(),
                "account_name": AS_BUCKET_NAME,
                "azure_container": AS_STATIC_CONTAINER,
            },
        },
    }
else:
    # logging.warning("Azure Storage is not configured.")
    MEDIA_URL = '/mediafiles/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),
}

# allauth / users
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "users:redirect"

# ACCOUNT_ADAPTER = "users.adapters.AccountAdapter"
# SOCIALACCOUNT_ADAPTER = "users.adapters.SocialAccountAdapter"
ACCOUNT_ALLOW_REGISTRATION = env.bool("ACCOUNT_ALLOW_REGISTRATION", True)
SOCIALACCOUNT_ALLOW_REGISTRATION = env.bool("SOCIALACCOUNT_ALLOW_REGISTRATION", True)

REST_AUTH = {
    # Replace password reset serializer to fix 500 error
    # "PASSWORD_RESET_SERIALIZER": "home.api.v1.serializers.PasswordSerializer",
    # Use custom serializer that has no username and matches web signup
    # "REGISTER_SERIALIZER": "home.api.v1.serializers.SignupSerializer",
}


REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# Custom user model
AUTH_USER_MODEL = "users.User"

EMAIL_HOST = env.str("EMAIL_HOST", "smtp.sendgrid.net")
EMAIL_HOST_USER = env.str("SENDGRID_USERNAME", "")
EMAIL_HOST_PASSWORD = env.str("SENDGRID_PASSWORD", "")
EMAIL_PORT = 587
EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = env.str(
    "DEFAULT_FROM_EMAIL", "Corrosion One Support <support@corrosion-one-49197.botics.co>"
)


# # AWS S3 config
# AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", "")
# AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", "")
# AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
# AWS_STORAGE_REGION = env.str("AWS_STORAGE_REGION", "")
#
# USE_S3 = (
#     AWS_ACCESS_KEY_ID and
#     AWS_SECRET_ACCESS_KEY and
#     AWS_STORAGE_BUCKET_NAME and
#     AWS_STORAGE_REGION
# )
#
# if USE_S3:
#     AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN", "")
#     AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
#     AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "bucket-owner-full-control")
#     AWS_MEDIA_LOCATION = env.str("AWS_MEDIA_LOCATION", "media")
#     AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
#     DEFAULT_FILE_STORAGE = env.str(
#         "DEFAULT_FILE_STORAGE", "home.storage_backends.MediaStorage"
#     )

SPECTACULAR_SETTINGS = {
    # available SwaggerUI configuration parameters
    # https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
    "SERVE_PERMISSIONS": ["rest_framework.permissions.IsAuthenticated"],\
    "TITLE": "corrosion_one_49197 API",
    "DESCRIPTION": "API documentation for corrosion_one_49197 App",
    "VERSION": "v1",
}

if DEBUG or not (EMAIL_HOST_USER and EMAIL_HOST_PASSWORD):
    # output email to console instead of sending
    if not DEBUG:
        logging.warning("You should setup `SENDGRID_USERNAME` and `SENDGRID_PASSWORD` env vars to send emails.")
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# GCP config
def google_service_account_config():
    # base64 encoded service_account.json file
    service_account_config = env.str("GS_CREDENTIALS", "")
    if not service_account_config:
        return {}
    try:
        return json.loads(base64.b64decode(service_account_config))
    except (binascii.Error, ValueError):
        return {}
# GOOGLE_SERVICE_ACCOUNT_CONFIG = google_service_account_config()
# if GOOGLE_SERVICE_ACCOUNT_CONFIG:
#     GS_CREDENTIALS = service_account.Credentials.from_service_account_info(GOOGLE_SERVICE_ACCOUNT_CONFIG)
# GS_BUCKET_NAME = env.str("GS_BUCKET_NAME", "")
# if GS_BUCKET_NAME:
#     DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
#     STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
#     GS_DEFAULT_ACL = "publicRead"
#


DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

ALLOW_SUPER_USERS_LOGIN = env.bool("ALLOW_SUPER_USERS_LOGIN", True)
PROJECT_NAME = env.str("PROJECT_NAME", "Project")
LOGO_URL = env.str("LOGO_URL", "https://example.com/logo.png")
REDIRECT_DEEP_LINK = env.str("REDIRECT_DEEP_LINK", "")


CORS_ALLOW_ALL = DEBUG
CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://localhost:3001',
    'http://0.0.0.0:3000',
    'http://192.168.183.108:3000',
    'http://192.168.183.108',
    'https://corrosion-one-49197.azurewebsites.net',
    'http://corrosion-one-49197.azurewebsites.net',
    'https://stgcontent71740.blob.core.windows.net',
    'https://app.corrosionone.com'
]

CORS_EXPOSE_HEADERS = [
    'content-disposition',
]

TWILIO_API_KEY_SID = env.str("TWILIO_API_KEY_SID", "")
TWILIO_API_KEY_SECRET = env.str("TWILIO_API_KEY_SECRET", "")
TWILIO_ACCOUNT_SID = env.str("TWILIO_ACCOUNT_SID", "")
TWILIO_NUMBER = env.str("TWILIO_NUMBER", "")

SENTRY_DSN = env.str("SENTRY_DSN", "")

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
        ],

        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True
    )

JAZZMIN_SETTINGS = {
    "site_logo": "img/logo.png",
    "site_brand": "Corrosion One",
    "site_logo_classes": " elevation-0",
    "site_icon": "img/favicon.png",

    "login_logo": "img/logo.png",
    "icons": {
        "privacy_policy.PrivacyPolicy": "fas fa-eye-slash",
        "terms_and_conditions.TermAndCondition": "fas fa-file-contract",
        "users.User": "fas fa-user",
        "configuration.Configuration": "fas fa-cogs",
        "sites.Site": "fas fa-cloud",
    },
    "hide_apps": ["authtoken", "auth", 'sites'],
    "hide_models": [],
}

CITIES_LIGHT_TRANSLATION_LANGUAGES = ['en']
CITIES_LIGHT_DATA_DIR = os.path.join('/tmp', 'cities')
# ignore cities
CITIES_LIGHT_CITY_SOURCES = []

CITIES_LIGHT_SUBREGION_SOURCES = []


RECAPTCHA_SECRET_KEY = env.str("RECAPTCHA_SECRET_KEY", "")
RECAPTCHA_SITE_KEY = env.str("RECAPTCHA_SITE_KEY", "")

GOOGLE_OAUTH2_CLIENT_SECRET = env.str("GOOGLE_OAUTH2_CLIENT_SECRET", "")
GOOGLE_OAUTH2_CLIENT_ID = env.str("GOOGLE_OAUTH2_CLIENT_ID", "")
GOOGLE_OAUTH2_REDIRECT_URI = env.str("GOOGLE_OAUTH2_REDIRECT_URI", "")
GOOGLE_OAUTH2_REDIRECT_URI_SIGNUP = env.str("GOOGLE_OAUTH2_REDIRECT_URI_SIGNUP", "")

OVERRIDE_REDIS_URL = env.str("OVERRIDE_REDIS_URL", None)
REDIS_URL = OVERRIDE_REDIS_URL or env.str("REDIS_URL", "redis://redis:6379/0")

REDIS_PARAMS = dict(ssl_cert_reqs=None) if REDIS_URL.startswith("rediss:") else dict()

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION":  REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "IGNORE_EXCEPTIONS": True,
            "REDIS_CLIENT_KWARGS": REDIS_PARAMS,
            "CONNECTION_POOL_KWARGS": {
                #"max_connections": 40,
                **REDIS_PARAMS,
            },
        }
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.pubsub.RedisPubSubChannelLayer",
        "CONFIG": {
            "hosts": [dict(address=REDIS_URL, **REDIS_PARAMS)],
        },
    },
}

CELERY_BROKER_URL = CELERY_RESULT_BACKEND = env.str("REDIS_URL", "redis://redis:6379/")


STRIPE_LIVE_PUBLIC_KEY = env.str("STRIPE_LIVE_PUBLIC_KEY", "")
STRIPE_LIVE_SECRET_KEY = env.str("STRIPE_LIVE_SECRET_KEY", "")
STRIPE_TEST_PUBLIC_KEY = env.str("STRIPE_TEST_PUBLIC_KEY", "")
STRIPE_TEST_SECRET_KEY = env.str("STRIPE_TEST_SECRET_KEY", "")
STRIPE_LIVE_MODE = env.bool("STRIPE_LIVE_MODE", default=False)
STRIPE_WEBHOOK_SECRET = env.str("STRIPE_WEBHOOK_SECRET", "")

# settings.py

CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        # Fallback for all resource types not otherwise specified
        'default-src': ("'self'",),

        # Scripts your site uses (including Stripe, Google, etc.)
        # Also allow inline scripts if necessary (via 'unsafe-inline')
        'script-src': (
            "'self'",
            "'unsafe-inline'",  # If you have inline scripts (not ideal, but quick fix)
            "https://connect-js.stripe.com",
            "https://js.stripe.com",
            "https://stgcontent71740.blob.core.windows.net",
            "https://www.google.com",
            "https://www.gstatic.com"
        ),
        # Some browsers differentiate script-src vs script-src-elem for <script> tags
        'script-src-elem': (
            "'self'",
            "'unsafe-inline'",
            "https://accounts.google.com",  # for gsi/client if you need Google sign-in
            "https://connect-js.stripe.com",
            "https://js.stripe.com",
            "https://stgcontent71740.blob.core.windows.net",
            "https://www.google.com",
            "https://www.gstatic.com"
        ),

        # Stylesheets from self, Google, unpkg, etc.
        # Allow inline styles if React/MUI or Leaflet inject them
        'style-src': (
            "'self'",
            "'unsafe-inline'",
            "https://fonts.googleapis.com",
            "https://unpkg.com",       # if Leaflet loads CSS from unpkg
        ),
        # Same note as with script-src-elem
        'style-src-elem': (
            "'self'",
            "'unsafe-inline'",
            "https://fonts.googleapis.com",
            "https://unpkg.com",
            "https://stgcontent71740.blob.core.windows.net",
        ),

        # Images from self, data URLs, and Stripe
        'img-src': (
            "'self'",
            "data:",
            "blob:",
            "https://*.stripe.com",
            "https://stgcontent71740.blob.core.windows.net",
            "https://cdnjs.cloudflare.com",
            "https://app.corrosionone.com",
        ),

        # Fonts (Google Fonts, etc.)
        'font-src': (
            "'self'",
            "https://fonts.gstatic.com",
            "https://unpkg.com",
            "https://stgcontent71740.blob.core.windows.net",
        ),

        # Frames (Stripe Elements, etc.)
        'frame-src': (
            "'self'",
            "https://connect-js.stripe.com",
            "https://js.stripe.com",
            "https://www.gstatic.com",
            "https://www.google.com",
        ),

        # If your app loads web workers via blob: or external domains:
        'worker-src': (
            "'self'",
            "blob:",
        ),

        # If your app or PWAs have a manifest.json
        'manifest-src': (
            "'self'",
        ),

        # Allow fetch/XHR/WebSocket calls to your own domain, Sentry, Stripe, etc.
        'connect-src': (
            "'self'",
            "https://connect-js.stripe.com",
            "https://js.stripe.com",
            "http://0.0.0.0:8000",
            "https://app.corrosionone.com",
            "https://corrosion-one-49197.azurewebsites.net",
            "https://sentry.innovatica.com.py",
            "https://fonts.googleapis.com",
            "https://fonts.gstatic.com",
            "https://stgcontent71740.blob.core.windows.net",
            "wss://tsock.us1.twilio.com",
            "https://www.gstatic.com",
            "https://mcs.us1.twilio.com",
        ),

    }
}

SECURE_CROSS_ORIGIN_OPENER_POLICY = 'unsafe-none'